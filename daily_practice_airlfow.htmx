<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Airflow DAG Memory Game (HTMX Version)</title>
  <!-- HTMX Library -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/htmx/1.9.10/htmx.min.js"></script>
  <!-- Sortable.js for drag and drop -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.1/Sortable.min.js"></script>
  <style>
    body {
      font-family: 'Courier New', monospace;
      line-height: 1.6;
      margin: 0;
      padding: 20px;
      background-color: #f5f5f5;
    }
    .container {
      display: flex;
      gap: 1px; /* Reduced to a very small gap */
      max-width: 100%;
      min-height: calc(100vh - 80px);
      /* Ensure flex items stretch vertically (default is stretch) */
      align-items: stretch;
    }
    .column {
      overflow-y: auto;
      background-color: white;
      border-radius: 5px;
      padding: 5px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      display: flex;
      flex-direction: column;
      /* Changed from height: auto to height: 100% to force columns to stretch equally */
      height: 100%;
      padding-bottom: 60px;
    }
    /* Make first column wider but 10% narrower than before */
    .column:first-child {
      flex: 2.4; /* Reduced from 3 to 2.7 (10% reduction) */
    }
    /* Make keywords column smallest */
    .column:nth-child(2) {
      flex: 1; /* Second column (keywords) gets 1 part */
    }
    /* Make hints column wider by adding the extra 10% from first column */
    .column:nth-child(3) {
      flex: 1.6; /* Third column (hints) gets 1.3 parts (added the 0.3 from first column) */
    }
    h1 {
      text-align: center;
      color: #4b5263;
      margin-bottom: 20px;
    }
    h2 {
      color: #4b5263;
      text-align: center;
      margin-top: 0;
      padding-bottom: 10px;
      border-bottom: 2px solid #e1e1e1;
    }
    .code-container {
      background-color: #282c34;
      color: #abb2bf;
      padding: 20px;
      border-radius: 5px;
      white-space: pre;
      overflow-x: auto;
      flex-grow: 1;
    }
    .blank {
      display: inline-block;
      min-width: 60px;
      height: 20px;
      margin: 0 5px;
      background-color: #4b5263;
      border-radius: 3px;
      text-align: center;
      line-height: 20px;
      padding: 2px 5px;
      vertical-align: middle;
      cursor: pointer;
    }
    .blank-highlight {
      box-shadow: 0 0 0 2px #61afef;
    }
    .keyword-box {
      display: flex;
      flex-direction: column;
      gap: 10px;
      margin-bottom: 20px;
      background-color: #282c34;
      padding: 15px;
      border-radius: 5px;
      flex-grow: 1;
      overflow-y: auto;
    }
    .keyword {
      background-color: #61afef;
      color: white;
      padding: 5px 10px;
      border-radius: 3px;
      cursor: grab;
      font-weight: bold;
      user-select: none;
      touch-action: none;
      text-align: center;
      margin-bottom: 5px;
    }
    .keyword.dragging {
      opacity: 0.5;
      cursor: grabbing;
    }
    .controls {
      display: flex;
      gap: 10px;
      margin-bottom: 15px;
    }
    button {
      flex: 1;
      background-color: #98c379;
      color: white;
      border: none;
      padding: 10px 15px;
      border-radius: 3px;
      cursor: pointer;
      font-weight: bold;
    }
    .correct {
      background-color: #98c379;
      color: white;
    }
    .incorrect {
      background-color: #e06c75;
      color: white;
    }
    .hint-box {
      background-color: #282c34;
      color: #e5c07b;
      padding: 10px;
      border-radius: 5px;
      overflow-x: auto;
      flex-grow: 1;
    }
    .score-display {
      font-size: 18px;
      font-weight: bold;
      text-align: center;
      margin-bottom: 10px;
      padding: 10px;
      background-color: #e1e1e1;
      border-radius: 5px;
    }
    .score-correct {
      color: #98c379;
    }
    .score-total {
      color: #61afef;
    }
    .reference-code {
      white-space: pre;
      font-family: 'Courier New', monospace;
    }
    .blank[data-filled] {
      background-color: transparent;
    }
    @media (max-width: 900px) {
      .container {
        flex-direction: column;
        height: auto;
      }
      .column {
        /* You might choose to adjust or remove the max-height for mobile */
        height: auto;
        max-height: 500px;
      }
      /* Reset column widths in mobile view */
      .column:first-child,
      .column:not(:first-child) {
        flex: 1;
      }
    }
  </style>
</head>
<body hx-ext="class-tools">
  <h1>Airflow DAG Memory Game</h1>
  
  <div class="score-display">
    Correct: <span id="scoreCorrect" class="score-correct">0</span> / <span id="scoreTotal" class="score-total">28</span>
  </div>
  
  <div class="container">
    <!-- Column 1: Code with blanks -->
    <div class="column">
      <h2>Fill in the Blanks</h2>
      <div class="code-container" id="codeContainer">
from <span class="blank" data-answer="airflow" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "airflow"}'>_____</span> import <span class="blank" data-answer="DAG" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "DAG"}'>___</span>
from <span class="blank" data-answer="airflow.operators.bash" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "airflow.operators.bash"}'>___________________</span> import <span class="blank" data-answer="BashOperator" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "BashOperator"}'>____________</span>
from <span class="blank" data-answer="airflow.operators.python" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "airflow.operators.python"}'>_____________________</span> import <span class="blank" data-answer="PythonOperator" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "PythonOperator"}'>______________</span>
from <span class="blank" data-answer="datetime" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "datetime"}'>________</span> import datetime, <span class="blank" data-answer="timedelta" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "timedelta"}'>_________</span>

args = {
    '<span class="blank" data-answer="owner" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "owner"}'>_____</span>': 'me',
    '<span class="blank" data-answer="start_date" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "start_date"}'>__________</span>': datetime(2023, 1, 1),
    '<span class="blank" data-answer="retries" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "retries"}'>_______</span>': 1,
    '<span class="blank" data-answer="retry_delay" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "retry_delay"}'>___________</span>': timedelta(minutes=1),
}

<span class="blank" data-answer="with" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "with"}'>____</span> DAG(
    'simple_dag',
    default_args=args,
    <span class="blank" data-answer="description" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "description"}'>___________</span>='Simple DAG',
    <span class="blank" data-answer="schedule_interval" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "schedule_interval"}'>________________</span>=timedelta(days=1),
    <span class="blank" data-answer="catchup" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "catchup"}'>_______</span>=False,
) <span class="blank" data-answer="as" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "as"}'>__</span> dag:
    t1 = <span class="blank" data-answer="BashOperator" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "BashOperator"}'>____________</span>(
        <span class="blank" data-answer="task_id" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "task_id"}'>_______</span>='t1',
        <span class="blank" data-answer="bash_command" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "bash_command"}'>____________</span>='echo "Hello"'
    )
    
    <span class="blank" data-answer="def" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "def"}'>___</span> fn():
        <span class="blank" data-answer="print" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "print"}'>_____</span>("Hi")
    
    t2 = <span class="blank" data-answer="PythonOperator" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "PythonOperator"}'>______________</span>(
        <span class="blank" data-answer="task_id" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "task_id"}'>_______</span>='t2',
        <span class="blank" data-answer="python_callable" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": "python_callable"}'>_______________</span>=fn
    )
    
    t3 = BashOperator(
        task_id='t3',
        bash_command='echo "Bye"'
    )
    
    t1 <span class="blank" data-answer=">>" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": ">>"}'>__</span> t2 <span class="blank" data-answer=">>" hx-post="/check-answer" hx-trigger="click" hx-swap="outerHTML" hx-vals='{"answer": ">>"}'>__</span> t3
      </div>
    </div>
    
    <!-- Column 2: Keywords -->
    <div class="column">
      <h2>Available Keywords</h2>
      <div class="controls">
        <button hx-post="/reset-game" hx-target="#game-container" hx-swap="none" hx-trigger="click">Reset Game</button>
      </div>
      <div class="keyword-box" id="keywordBox" hx-target="closest .blank-highlight">
        <!-- Keywords will be added dynamically with HTMX -->
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": "airflow"}' hx-trigger="click">airflow</div>
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": "DAG"}' hx-trigger="click">DAG</div>
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": "airflow.operators.bash"}' hx-trigger="click">airflow.operators.bash</div>
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": "BashOperator"}' hx-trigger="click">BashOperator</div>
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": "airflow.operators.python"}' hx-trigger="click">airflow.operators.python</div>
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": "PythonOperator"}' hx-trigger="click">PythonOperator</div>
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": "datetime"}' hx-trigger="click">datetime</div>
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": "timedelta"}' hx-trigger="click">timedelta</div>
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": "owner"}' hx-trigger="click">owner</div>
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": "start_date"}' hx-trigger="click">start_date</div>
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": "retries"}' hx-trigger="click">retries</div>
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": "retry_delay"}' hx-trigger="click">retry_delay</div>
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": "with"}' hx-trigger="click">with</div>
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": "description"}' hx-trigger="click">description</div>
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": "schedule_interval"}' hx-trigger="click">schedule_interval</div>
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": "catchup"}' hx-trigger="click">catchup</div>
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": "as"}' hx-trigger="click">as</div>
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": "task_id"}' hx-trigger="click">task_id</div>
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": "bash_command"}' hx-trigger="click">bash_command</div>
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": "python_callable"}' hx-trigger="click">python_callable</div>
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": "def"}' hx-trigger="click">def</div>
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": "print"}' hx-trigger="click">print</div>
        <div class="keyword" hx-post="/fill-blank" hx-vals='{"keyword": ">>"}' hx-trigger="click">>></div>
      </div>
    </div>
    
    <!-- Column 3: Hint and reference -->
    <div class="column">
      <h2>Hints & Reference</h2>
      <div class="hint-box" id="hintBox">
        <h3>Complete Reference Code:</h3>
        <div class="reference-code">from airflow import DAG
from airflow.operators.bash import BashOperator
from airflow.operators.python import PythonOperator
from datetime import datetime, timedelta

args = {
    'owner': 'me',
    'start_date': datetime(2023, 1, 1),
    'retries': 1,
    'retry_delay': timedelta(minutes=1),
}

with DAG(
    'simple_dag',
    default_args=args,
    description='Simple DAG',
    schedule_interval=timedelta(days=1),
    catchup=False,
) as dag:
    t1 = BashOperator(
        task_id='t1',
        bash_command='echo "Hello"'
    )
    
    def fn():
        print("Hi")
    
    t2 = PythonOperator(
        task_id='t2',
        python_callable=fn
    )
    
    t3 = BashOperator(
        task_id='t3',
        bash_command='echo "Bye"'
    )
    
    t1 >> t2 >> t3</div>
                    
        <h3>Tips:</h3>
        <ul>
          <li>Remember to import the correct operators for bash and python</li>
          <li>A DAG requires owner, start_date, retries, and retry_delay</li>
          <li>Use "with" to create a context manager for the DAG</li>
          <li>Task dependencies are set with the ">>" operator</li>
        </ul>
      </div>
    </div>
  </div>

  <!-- HTMX API Endpoints Simulation with JavaScript -->
  <script>
    // Initialize game state
    let gameState = {
      correctCount: 0,
      totalBlanks: 28,
      selectedBlank: null
    };

    // Mock HTMX endpoints using JavaScript
    htmx.onLoad(function() {
      // Shuffle keywords
      const keywordBox = document.getElementById('keywordBox');
      const keywordElements = Array.from(keywordBox.querySelectorAll('.keyword'));
      
      // Fisher-Yates shuffle
      for (let i = keywordElements.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        keywordBox.appendChild(keywordElements[j]);
        keywordElements[j] = keywordElements[i];
      }
      
      // Blank selection handling
      document.querySelectorAll('.blank').forEach(blank => {
        blank.addEventListener('click', () => {
          document.querySelectorAll('.blank-highlight').forEach(el => {
            el.classList.remove('blank-highlight');
          });
          blank.classList.add('blank-highlight');
          gameState.selectedBlank = blank;
        });
      });

      // Mock the /fill-blank endpoint
      htmx.defineEndpoint('/fill-blank', {
        handleRequest: function(request, response) {
          const keyword = JSON.parse(request.requestBody).keyword;
          
          if (gameState.selectedBlank) {
            const blank = gameState.selectedBlank;
            
            // If blank already has a keyword and was correct, decrement score
            if (blank.dataset.filled && blank.classList.contains('correct')) {
              gameState.correctCount--;
              document.getElementById('scoreCorrect').textContent = gameState.correctCount;
            }
            
            // Update blank with new keyword
            blank.textContent = keyword;
            blank.dataset.filled = keyword;
            
            // Check if correct
            if (keyword === blank.dataset.answer) {
              blank.classList.add('correct');
              blank.classList.remove('incorrect');
              gameState.correctCount++;
              document.getElementById('scoreCorrect').textContent = gameState.correctCount;
              
              // Check if all correct
              if (gameState.correctCount === gameState.totalBlanks) {
                setTimeout(() => {
                  alert('Congratulations! You have completed the exercise!');
                }, 500);
              }
            } else {
              blank.classList.add('incorrect');
              blank.classList.remove('correct');
            }
            
            // Remove highlight
            blank.classList.remove('blank-highlight');
            gameState.selectedBlank = null;
          }
          
          response.status = 200;
          response.body = "";
        }
      });

      // Mock the /check-answer endpoint
      htmx.defineEndpoint('/check-answer', {
        handleRequest: function(request, response) {
          const requestedAnswer = JSON.parse(request.requestBody).answer;
          const clickedBlank = document.querySelector('.blank-highlight') || request.elt;
          
          document.querySelectorAll('.blank-highlight').forEach(el => {
            el.classList.remove('blank-highlight');
          });
          
          clickedBlank.classList.add('blank-highlight');
          gameState.selectedBlank = clickedBlank;
          
          response.status = 200;
          response.body = clickedBlank.outerHTML;
        }
      });

      // Mock the /reset-game endpoint
      htmx.defineEndpoint('/reset-game', {
        handleRequest: function(request, response) {
          document.querySelectorAll('.blank').forEach(blank => {
            blank.textContent = '_____';
            blank.classList.remove('correct', 'incorrect', 'blank-highlight');
            delete blank.dataset.filled;
          });
          
          gameState.correctCount = 0;
          document.getElementById('scoreCorrect').textContent = gameState.correctCount;
          gameState.selectedBlank = null;
          
          response.status = 200;
          response.body = "";
        }
      });
    });
  </script>
</body>
</html>
